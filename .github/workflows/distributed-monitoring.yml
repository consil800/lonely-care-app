name: 3600초 기반 초단위 분산 모니터링

on:
  # 매분마다 실행 (GitHub Actions 최소 단위)
  schedule:
    - cron: '* * * * *'  # 매분 실행
  
  # 수동 실행 가능
  workflow_dispatch:
    inputs:
      target_second:
        description: '타겟 절대 초 (0-3599, 빈값이면 현재 시간 기준 60개 슬롯 처리)'
        required: false
        type: string

jobs:
  # 매분마다 60초를 병렬로 처리 (1분 = 60초 슬롯)
  distributed-monitoring-3600:
    runs-on: ubuntu-latest
    
    strategy:
      # 병렬로 60개 초를 동시 처리
      max-parallel: 60
      matrix:
        second_offset: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
    
    steps:
      - name: 3600초 분산 모니터링 실행
        run: |
          # 현재 절대 초 계산 (0~3599)
          if [ "${{ github.event.inputs.target_second }}" != "" ]; then
            ABSOLUTE_SECOND=$(( ${{ github.event.inputs.target_second }} % 3600 ))
          else
            CURRENT_MINUTE=$(date +%M | sed 's/^0*//')
            CURRENT_SECOND=$(date +%S | sed 's/^0*//')
            
            # 빈 값 처리 (00분, 00초인 경우)
            CURRENT_MINUTE=${CURRENT_MINUTE:-0}
            CURRENT_SECOND=${CURRENT_SECOND:-0}
            
            # 현재 분의 60개 슬롯 중 하나를 처리
            BASE_SECOND=$(( CURRENT_MINUTE * 60 ))
            ABSOLUTE_SECOND=$(( (BASE_SECOND + ${{ matrix.second_offset }}) % 3600 ))
          fi
          
          TARGET_MINUTE=$(( ABSOLUTE_SECOND / 60 ))
          TARGET_SECOND=$(( ABSOLUTE_SECOND % 60 ))
          
          echo "🕐 처리할 절대 초: $ABSOLUTE_SECOND (${TARGET_MINUTE}분 ${TARGET_SECOND}초)"
          
          # Supabase Edge Function 호출
          RESPONSE=$(curl -X POST "${{ secrets.SUPABASE_URL }}/functions/v1/distributed-monitoring" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{\"target_second\": $ABSOLUTE_SECOND}" \
            --max-time 25 \
            --retry 2 \
            --retry-delay 3 \
            --retry-max-time 30 \
            -s \
            -w "\nHTTP_CODE:%{http_code}" \
            || echo "CURL_FAILED")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ 성공: $RESPONSE_BODY"
          else
            echo "❌ 실패 (HTTP $HTTP_CODE): $RESPONSE_BODY"
          fi

      - name: 실행 결과 로깅
        run: |
          echo "⚡ 3600초 분산 모니터링 완료: $(date)"
          echo "처리된 절대 초: $ABSOLUTE_SECOND"
          echo "매트릭스 슬롯: ${{ matrix.second_offset }}"

  # 매시간마다 통계 및 성능 모니터링
  hourly-performance-check:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 * * * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 시간별 성능 통계
        run: |
          echo "📊 시간별 3600초 분산 모니터링 통계: $(date)"
          echo "🚀 이론적 처리 능력:"
          echo "  - 매초: 약 2,778개 친구 관계 (1천만 ÷ 3600)"
          echo "  - 매분: 약 166,667개 친구 관계 (60초 × 2,778)"
          echo "  - 매시: 1천만개 친구 관계 완전 순환"
          
          # 통계 조회 Edge Function 호출 (옵션)
          curl -X POST "${{ secrets.SUPABASE_URL }}/functions/v1/monitoring-stats" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
            -H "Content-Type: application/json" \
            --max-time 15 \
            -s \
            || echo "📈 상세 통계는 Supabase 대시보드에서 확인하세요"